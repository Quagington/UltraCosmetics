import org.apache.tools.ant.filters.ReplaceTokens

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'

    eclipse.classpath.downloadJavadoc = true
    eclipse.classpath.downloadSources = true
    idea.module.downloadJavadoc = true
    idea.module.downloadSources = true

    group = 'be.isach.UltraCosmetics'
    version = '3.10.2-RELEASE'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    }

    java {
        toolchain {
            // minimum Java version to compile all subprojects
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    configurations {
        shaded
        compile.extendsFrom shaded
    }

    def getGitHash = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    processResources {
        inputs.property('version', project.version)

        filter ReplaceTokens, tokens: [
                'VERSION' : project.version,
                'GIT-HASH': getGitHash()
        ]
    }

    afterEvaluate {
        jar {
            dependsOn configurations.shaded
            from configurations.shaded.collect {
                it.isDirectory() ?
                        it :
                        zipTree(it)
            }
        }
    }
}

defaultTasks 'obfuscate'

subprojects.each {
    if (!it.hasProperty('remapMcVersion')) return
    tasks.register('obf' + it.name, VersionedObfTask, it)
}

dependencies {
    subprojects.each { p ->
        if (p.name == 'core') {
            shaded(project(path: ':core', configuration: 'shadow'))
            return;
        }
        shaded(p) {
            transitive false
        }
    }
}

subprojects { subproj ->
    repositories {
        mavenLocal()
        mavenCentral()

        // AnvilGUI, Treasury
        maven { url = 'https://repo.codemc.io/repository/maven-snapshots/' }
        // Lib's Disguises
        maven { url = 'https://repo.md-5.net/content/groups/public/' }
        // WorldEdit
        maven { url = 'https://repo.aikar.co/nexus/content/groups/aikar' }
        // BungeeCord
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
        // PlaceholderAPI
        maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
        // PlayerPoints
        maven { url = 'https://repo.rosewooddev.io/repository/public/' }
        // SpigotMC
        maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        // WorldGuard
        maven { url = 'https://maven.enginehub.org/repo/' }
        // DiscordSRV
        maven { url = 'https://nexus.scarsz.me/content/groups/public/' }
        // ChestSort
        maven { url = 'https://repo.jeff-media.com/public/' }
        // Towny
        maven { url = 'https://repo.glaremasters.me/repository/towny/' }
        // PlayerAuctions
        maven { url = 'https://repo.olziedev.com/' }
        // Vault, PEconomy, MobChipLite, FoliaLib
        maven { url = 'https://jitpack.io' }
        // Paper API
        maven { url = 'https://repo.papermc.io/repository/maven-public/' }
        // Mojang Authlib
        maven { url = 'https://libraries.minecraft.net' }
    }
    def version = 17
    if (subproj.hasProperty('javaVersion')) {
        version = subproj.property('javaVersion')
    }
    subproj.tasks.withType(JavaCompile).configureEach {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(version)
        }
    }
}

abstract class VersionedObfTask extends DefaultTask {
    private Project subproj;

    @Inject
    public VersionedObfTask(Project subproj) {
        this.subproj = subproj
        dependsOn 'jar'
        description 'Generates an obfuscated version of the jar for use with Spigot.'
        group = 'jar preparation'
        ext.toolingDir = System.getProperty('user.dir')
        ext.homeDir = project.gradle.gradleUserHomeDir.parent
    }

    @TaskAction
    def go() {
        def nms = subproj.name
        def mcVer = subproj.getProperty('remapMcVersion')
        def filename = project.tasks.jar.archiveFileName.get()
        project.exec {
            workingDir project.buildDir
            commandLine 'java', '-cp', ext.toolingDir + '/tooling/specialsource/SpecialSource.jar' + File.pathSeparator + ext.homeDir + "/.m2/repository/org/spigotmc/spigot/$mcVer-R0.1-SNAPSHOT/spigot-$mcVer-R0.1-SNAPSHOT-remapped-mojang.jar",
                    'net.md_5.specialsource.SpecialSource', '--live', '--only', "be/isach/ultracosmetics/$nms", '-q',
                    '-i', 'libs/' + filename,
                    '-o', 'libs/obfuscated-donotuse-' + filename,
                    '-m', ext.homeDir + "/.m2/repository/org/spigotmc/minecraft-server/$mcVer-R0.1-SNAPSHOT/minecraft-server-$mcVer-R0.1-SNAPSHOT-maps-mojang.txt",
                    '--reverse'
        }
        project.exec {
            workingDir project.buildDir
            commandLine 'java', '-cp', ext.toolingDir + '/tooling/specialsource/SpecialSource.jar' + File.pathSeparator + ext.homeDir + "/.m2/repository/org/spigotmc/spigot/$mcVer-R0.1-SNAPSHOT/spigot-$mcVer-R0.1-SNAPSHOT-remapped-obf.jar",
                    'net.md_5.specialsource.SpecialSource', '--live', '--only', "be/isach/ultracosmetics/$nms", '-q',
                    '-i', 'libs/obfuscated-donotuse-' + filename,
                    '-o', 'libs/' + filename,
                    '-m', ext.homeDir + "/.m2/repository/org/spigotmc/minecraft-server/$mcVer-R0.1-SNAPSHOT/minecraft-server-$mcVer-R0.1-SNAPSHOT-maps-spigot.csrg"
        }
    }
}

tasks.register('obfuscate') {
    dependsOn tasks.withType(VersionedObfTask)
    group = 'jar preparation'
}
